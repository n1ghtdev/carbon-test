{"version":3,"sources":["components/table.tsx","components/table-row.tsx","components/table-cell.tsx","components/table-head.tsx","components/table-body.tsx","containers/device-editable-cell.tsx","utils/getUniquePropertyNames.ts","containers/device-inner-table.tsx","utils/filterEmptyObjects.ts","containers/device-table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Table","styled","table","TableRow","tr","TableCell","td","Wrapper","thead","TableHead","cells","map","cell","key","style","background","as","tbody","TableBody","children","DeviceEditableCell","initialValue","React","useState","value","setValue","onChange","e","currentTarget","getUniquePropertyNames","arr","reduce","acc","cur","newKeys","Object","keys","filter","includes","DeviceInnerTable","data","types","headCells","row","idx","entries","array","innerTypes","Array","isArray","entry","length","DeviceTable","devices","device","deviceEntries","modName","propKey","val","App","api","deviceTree","deviceTreeTypeMap","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8cc880f9.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Table = styled.table`\n  width: 100%;\n`;\n\nexport default Table;\n","import styled from \"styled-components\";\n\nconst TableRow = styled.tr`\n  position: relative;\n  border-radius: 4px;\n  margin-bottom: 5px;\n`;\n\nexport default TableRow;\n","import styled from \"styled-components\";\n\nconst TableCell = styled.td`\n  text-align: center;\n  padding: 10px 5px;\n  background: #ddd;\n\n  & > table td {\n    background: #eee;\n  }\n`;\n\nexport default TableCell;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport TableRow from \"./table-row\";\nimport TableCell from \"./table-cell\";\n\ntype Props = {\n  cells: string[];\n};\n\nconst Wrapper = styled.thead``;\n\nfunction TableHead({ cells }: Props) {\n  return (\n    <Wrapper>\n      <TableRow>\n        {cells.map((cell: string) => (\n          <TableCell key={cell} style={{ background: \"#fff\" }} as=\"th\">\n            {cell}\n          </TableCell>\n        ))}\n      </TableRow>\n    </Wrapper>\n  );\n}\n\nexport default TableHead;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Wrapper = styled.tbody``;\n\nfunction TableBody({ children }: Props) {\n  return <Wrapper>{children}</Wrapper>;\n}\n\nexport default TableBody;\n","import React from \"react\";\n\nimport TableCell from \"../components/table-cell\";\n\ntype Props = {\n  initialValue: string | number;\n};\n\nfunction DeviceEditableCell({ initialValue }: Props) {\n  const [value, setValue] = React.useState(initialValue);\n\n  function handleChange(e: React.FormEvent<HTMLInputElement>) {\n    setValue(e.currentTarget.value);\n  }\n\n  return (\n    <TableCell>\n      <input value={value} onChange={handleChange} />\n    </TableCell>\n  );\n}\n\nexport default DeviceEditableCell;\n","export function getUniquePropertyNames<T>(arr: T[]) {\n  return arr.reduce((acc: string[], cur: T) => {\n    const currentKeys = Object.keys(cur);\n    const newKeys = currentKeys.filter((key: string) => !acc.includes(key));\n\n    return [...acc, ...newKeys];\n  }, []);\n}\n","import React from \"react\";\n\nimport Table from \"../components/table\";\nimport TableHead from \"../components/table-head\";\nimport TableRow from \"../components/table-row\";\nimport TableCell from \"../components/table-cell\";\nimport TableBody from \"../components/table-body\";\nimport DeviceEditableCell from \"./device-editable-cell\";\n\nimport { getUniquePropertyNames } from \"../utils/getUniquePropertyNames\";\nimport { filterEmptyObjects } from \"../utils/filterEmptyObjects\";\nimport { DeviceProduct, DeviceOption } from \"src/types\";\n\ntype Props = {\n  data: DeviceProduct[] | DeviceOption[];\n  types: any[];\n};\n\nfunction DeviceInnerTable({ data, types }: Props) {\n  const headCells = getUniquePropertyNames<DeviceProduct | DeviceOption>(data);\n\n  return (\n    <Table>\n      <TableHead cells={headCells} />\n      <TableBody>\n        {(data as Array<DeviceProduct | DeviceOption>).map(\n          (row: DeviceProduct | DeviceOption, idx: number) => {\n            const entries = Object.entries(row);\n\n            return (\n              <TableRow key={idx}>\n                {entries.map(([key, value]: [any, any]) => {\n                  const innerTypes = filterEmptyObjects(types);\n                  const isCellEditable = innerTypes[0] && innerTypes[0][key];\n\n                  if (isCellEditable) {\n                    return (\n                      <DeviceEditableCell key={key} initialValue={value} />\n                    );\n                  }\n\n                  return <TableCell key={key}>{value}</TableCell>;\n                })}\n              </TableRow>\n            );\n          }\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default DeviceInnerTable;\n","export function filterEmptyObjects<T>(array: T[]) {\n  return Array.isArray(array)\n    ? array.filter((entry: T) => {\n        return Object.keys(entry).length !== 0;\n      })\n    : [];\n}\n","import React from \"react\";\n\nimport Table from \"../components/table\";\nimport TableHead from \"../components/table-head\";\nimport TableRow from \"../components/table-row\";\nimport TableCell from \"../components/table-cell\";\nimport TableBody from \"../components/table-body\";\nimport DeviceInnerTable from \"./device-inner-table\";\n\nimport { getUniquePropertyNames } from \"../utils/getUniquePropertyNames\";\nimport { Device } from \"../types\";\n\ntype Props = {\n  devices: Device[];\n  types: any[];\n};\n\nfunction DeviceTable({ devices, types }: Props) {\n  const headCells = getUniquePropertyNames<Device>(devices);\n\n  return (\n    <Table>\n      <TableHead cells={headCells} />\n      <TableBody>\n        {devices.map((device: Device) => {\n          const deviceEntries = Object.entries(device);\n\n          return (\n            <TableRow key={device.modName}>\n              {deviceEntries.map(([propKey, val]: [any, any]) => {\n                if (Array.isArray(val)) {\n                  const innerTypes = types[0][propKey];\n\n                  return (\n                    <TableCell key={propKey}>\n                      <DeviceInnerTable data={val} types={innerTypes} />\n                    </TableCell>\n                  );\n                }\n\n                return <TableCell key={propKey}>{val}</TableCell>;\n              })}\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default DeviceTable;\n","import React from \"react\";\n\nimport data from \"./data.json\";\nimport DeviceTable from \"./containers/device-table\";\n\nfunction App() {\n  const devices: any = data.api.deviceTree;\n  const types: any = data.api.deviceTreeTypeMap;\n\n  return (\n    <div style={{ margin: \"25px\" }}>\n      {Object.keys(devices).map((key: string) => (\n        <div key={key}>\n          <h2>{key}</h2>\n          <DeviceTable key={key} devices={devices[key]} types={types[key]} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}